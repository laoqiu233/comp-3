(START)
IR <- INSTRUCTION_MEMORY
BR <- PC
PC <- BR INC 0
IF OP_CODE IN [PUSH] JUMP TO PUSH
IF OP_CODE IN [POP] JUMP TO POP
IF OP_CODE IN [HLT] JUMP TO HLT
IF OPERAND_TYPE = POINTER_ADDRESS JUMP TO FETCH_POINTER_ADDRESS
IF OPERAND_TYPE = STACK_OFFSET JUMP TO FETCH_STACK_OFFSET
(FETCH_IMMEDIATE_OR_NO_OPERAND_OR_ADDRESS)
DR <- IR
IF OPERAND_TYPE = FETCH_ADDRESS JUMP TO OPERAND_FETCH
JUMP TO EXECUTE
(FETCH_POINTER_ADDRESS)
AR <- IR
DR <- DATA_MEMORY
JUMP TO OPERAND_FETCH
(FETCH_STACK_OFFSET)
BR <- SP
AR <- IR
DR <- BR - AR

(OPERAND_FETCH)
AR <- DR

# JMP instructions require special OF cycle
IF OP_CODE IN [JZ, JNZ, JB, JBE, JA, JAE, JMP] JUMP TO PRE_JUMP

# ST instruction doesn't need OF cycle
IF OP_CODE IN [ST] JUMP TO ST

# OPERAND FETCH
DR <- DATA_MEMORY

(EXECUTE)
IF OP_CODE IN [ADD] JUMP TO ADD
IF OP_CODE IN [SUB] JUMP TO SUB
IF OP_CODE IN [AND] JUMP TO AND
IF OP_CODE IN [OR] JUMP TO OR
IF OP_CODE IN [SHL] JUMP TO SHL
IF OP_CODE IN [SHR] JUMP TO SHR

(LD)
DR <- DATA_MEMORY
AC <- DR
JUMP TO END

(ST)
DATA_MEMORY <- AC + 0
JUMP TO END

(ADD)
BR <- AC + DR, LATCH_PS
JUMP TO MATH_END
(SUB)
BR <- AC - DR, LATCH_PS
JUMP TO MATH_END
(AND)
BR <- AC AND DR, LATCH_PS
JUMP TO MATH_END
(OR)
BR <- AC OR DR, LATCH_PS
JUMP TO MATH_END
(SHL)
BR <- AC SHL DR, LATCH_PS
JUMP TO MATH_END
(SHR)
BR <- AC SHR DR, LATCH_PS
(MATH_END)
AC <- BR
JUMP TO END


(PUSH)
BR <- 0 DEC SP
SP <- BR + 0, AR <- BR + 0
DATA_MEMORY <- AC + 0
JUMP TO END
(POP)
BR <- SP
SP <- BR INC 0
JUMP TO END
(HLT)
LATCH_HLT
JUMP TO END

(CMP)
(-), LATCH_PS
JUMP TO END

(PRE_JUMP)
IF OPERAND_TYPE = STACK_OFFSET JUMP TO GET_ADDRESS_FROM_STACK
JUMP TO JUMP_ROUTING
(GET_ADDRESS_FROM_STACK)
DR <- DATA_MEMORY # AR should already contain the address on the stack
(JUMP_ROUTING)
IF OP_CODE IN [JNZ] JUMP TO JNZ
IF OP_CODE IN [JA] JUMP TO JA
IF OP_CODE IN [JAE] JUMP TO JAE
IF OP_CODE IN [JBE] JUMP TO JBE
IF OP_CODE IN [JB] JUMP TO JB
IF OP_CODE IN [JMP] JUMP TO JMP

(JZ)
IF Z = 1 JUMP TO JMP
JUMP TO END
(JNZ)
IF Z = 0 JUMP TO JMP
JUMP TO END
(JA)
IF C = 1 AND Z = 0 JUMP TO JMP
JUMP TO END
(JAE)
IF C = 1 JUMP TO JMP
JUMP TO END
(JBE)
IF Z = 1 JUMP TO JMP
(JB)
IF C = 0 JUMP TO JMP
JUMP TO END
(JMP)
PC <- 0 + DR

(END)
JUMP TO START