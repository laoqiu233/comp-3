in_source: examples/hello.lisq
in: ''
out: |
  hello world!
out_prog: |-
  {
    "instructions": [
      {
        "instr_index": 0,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 550,
        "comment": "Jump to program start"
      },
      {
        "instr_index": 1,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 2,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"res\" onto stack"
      },
      {
        "instr_index": 3,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 4,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GT to stack"
      },
      {
        "instr_index": 5,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 6,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GT comparison"
      },
      {
        "instr_index": 7,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 8,
        "op_code": "JA",
        "operand_type": "address",
        "operand": 10,
        "comment": "jump to return if MathOp.GT was success"
      },
      {
        "instr_index": 9,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 10,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GT from stack"
      },
      {
        "instr_index": 11,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 12,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 26,
        "comment": "end while loop"
      },
      {
        "instr_index": 13,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 14,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHR to stack"
      },
      {
        "instr_index": 15,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 16,
        "op_code": "SHR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHR math operation"
      },
      {
        "instr_index": 17,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHR from stack"
      },
      {
        "instr_index": 18,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable val"
      },
      {
        "instr_index": 19,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 20,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 21,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier res from stack"
      },
      {
        "instr_index": 22,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 23,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 24,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable res"
      },
      {
        "instr_index": 25,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 3,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 26,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "load by identifier res from stack"
      },
      {
        "instr_index": 27,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"res\" out of stack"
      },
      {
        "instr_index": 28,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 1,
        "comment": "return from function bits"
      },
      {
        "instr_index": 29,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 30,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"r\" onto stack"
      },
      {
        "instr_index": 31,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 32,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"q\" onto stack"
      },
      {
        "instr_index": 33,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 34,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 35,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 40,
        "comment": "load next instruction address (return from bits)"
      },
      {
        "instr_index": 36,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 37,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 5,
        "comment": "load by identifier n from stack"
      },
      {
        "instr_index": 38,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 39,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 1,
        "comment": "function call"
      },
      {
        "instr_index": 40,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 41,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 42,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 43,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 44,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"i\" onto stack"
      },
      {
        "instr_index": 45,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 46,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GE to stack"
      },
      {
        "instr_index": 47,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 48,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GE comparison"
      },
      {
        "instr_index": 49,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 50,
        "op_code": "JAE",
        "operand_type": "address",
        "operand": 52,
        "comment": "jump to return if MathOp.GE was success"
      },
      {
        "instr_index": 51,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 52,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GE from stack"
      },
      {
        "instr_index": 53,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 54,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 110,
        "comment": "end while loop"
      },
      {
        "instr_index": 55,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 56,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 57,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier q from stack"
      },
      {
        "instr_index": 58,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 59,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 60,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable q"
      },
      {
        "instr_index": 61,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 62,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 63,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 64,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 65,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 66,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 67,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 68,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 69,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 70,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHR to stack"
      },
      {
        "instr_index": 71,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 6,
        "comment": "load by identifier n from stack"
      },
      {
        "instr_index": 72,
        "op_code": "SHR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHR math operation"
      },
      {
        "instr_index": 73,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHR from stack"
      },
      {
        "instr_index": 74,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 75,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 76,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 77,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 78,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 79,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 80,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 81,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier d from stack"
      },
      {
        "instr_index": 82,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GE to stack"
      },
      {
        "instr_index": 83,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 84,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GE comparison"
      },
      {
        "instr_index": 85,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 86,
        "op_code": "JAE",
        "operand_type": "address",
        "operand": 88,
        "comment": "jump to return if MathOp.GE was success"
      },
      {
        "instr_index": 87,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 88,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GE from stack"
      },
      {
        "instr_index": 89,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "if compare"
      },
      {
        "instr_index": 90,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 103,
        "comment": "jump to end or false branch if false"
      },
      {
        "instr_index": 91,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier d from stack"
      },
      {
        "instr_index": 92,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 93,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 94,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 95,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 96,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 97,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 98,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 99,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier q from stack"
      },
      {
        "instr_index": 100,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 101,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 102,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable q"
      },
      {
        "instr_index": 103,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 104,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 105,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 106,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 107,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 108,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable i"
      },
      {
        "instr_index": 109,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 45,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 110,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier q from stack"
      },
      {
        "instr_index": 111,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"i\" out of stack"
      },
      {
        "instr_index": 112,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"q\" out of stack"
      },
      {
        "instr_index": 113,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"r\" out of stack"
      },
      {
        "instr_index": 114,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 2,
        "comment": "return from function divide"
      },
      {
        "instr_index": 115,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 116,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"r\" onto stack"
      },
      {
        "instr_index": 117,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 118,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"q\" onto stack"
      },
      {
        "instr_index": 119,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 120,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 121,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 126,
        "comment": "load next instruction address (return from bits)"
      },
      {
        "instr_index": 122,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 123,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 5,
        "comment": "load by identifier n from stack"
      },
      {
        "instr_index": 124,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 125,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 1,
        "comment": "function call"
      },
      {
        "instr_index": 126,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 127,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 128,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 129,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 130,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"i\" onto stack"
      },
      {
        "instr_index": 131,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 132,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GE to stack"
      },
      {
        "instr_index": 133,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 134,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GE comparison"
      },
      {
        "instr_index": 135,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 136,
        "op_code": "JAE",
        "operand_type": "address",
        "operand": 138,
        "comment": "jump to return if MathOp.GE was success"
      },
      {
        "instr_index": 137,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 138,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GE from stack"
      },
      {
        "instr_index": 139,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 140,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 196,
        "comment": "end while loop"
      },
      {
        "instr_index": 141,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 142,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 143,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier q from stack"
      },
      {
        "instr_index": 144,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 145,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 146,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable q"
      },
      {
        "instr_index": 147,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 148,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 149,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 150,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 151,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 152,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 153,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 154,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 155,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 156,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHR to stack"
      },
      {
        "instr_index": 157,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 6,
        "comment": "load by identifier n from stack"
      },
      {
        "instr_index": 158,
        "op_code": "SHR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHR math operation"
      },
      {
        "instr_index": 159,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHR from stack"
      },
      {
        "instr_index": 160,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 161,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 162,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 163,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 164,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 165,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 166,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 167,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier d from stack"
      },
      {
        "instr_index": 168,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GE to stack"
      },
      {
        "instr_index": 169,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 170,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GE comparison"
      },
      {
        "instr_index": 171,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 172,
        "op_code": "JAE",
        "operand_type": "address",
        "operand": 174,
        "comment": "jump to return if MathOp.GE was success"
      },
      {
        "instr_index": 173,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 174,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GE from stack"
      },
      {
        "instr_index": 175,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "if compare"
      },
      {
        "instr_index": 176,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 189,
        "comment": "jump to end or false branch if false"
      },
      {
        "instr_index": 177,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier d from stack"
      },
      {
        "instr_index": 178,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 179,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 180,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 181,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 182,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable r"
      },
      {
        "instr_index": 183,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 184,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 185,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier q from stack"
      },
      {
        "instr_index": 186,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 187,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 188,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable q"
      },
      {
        "instr_index": 189,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 190,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 191,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 192,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 193,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 194,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable i"
      },
      {
        "instr_index": 195,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 131,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 196,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier r from stack"
      },
      {
        "instr_index": 197,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"i\" out of stack"
      },
      {
        "instr_index": 198,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"q\" out of stack"
      },
      {
        "instr_index": 199,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"r\" out of stack"
      },
      {
        "instr_index": 200,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 2,
        "comment": "return from function remainder"
      },
      {
        "instr_index": 201,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 208,
        "comment": "load next instruction address (return from divide)"
      },
      {
        "instr_index": 202,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 203,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 204,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 205,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load literal 4"
      },
      {
        "instr_index": 206,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 207,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 29,
        "comment": "function call"
      },
      {
        "instr_index": 208,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 209,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 210,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 211,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 212,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier s from stack"
      },
      {
        "instr_index": 213,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 214,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 215,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"addr\" onto stack"
      },
      {
        "instr_index": 216,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 223,
        "comment": "load next instruction address (return from remainder)"
      },
      {
        "instr_index": 217,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 218,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 219,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 220,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load literal 4"
      },
      {
        "instr_index": 221,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 222,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 115,
        "comment": "function call"
      },
      {
        "instr_index": 223,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 224,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 225,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 226,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"j\" onto stack"
      },
      {
        "instr_index": 227,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 228,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"char4\" onto stack"
      },
      {
        "instr_index": 229,
        "op_code": "LD",
        "operand_type": "pointer_stack_offset",
        "operand": 2,
        "comment": "load by pointer addr"
      },
      {
        "instr_index": 230,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable char4"
      },
      {
        "instr_index": 231,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 232,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GT to stack"
      },
      {
        "instr_index": 233,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 234,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GT comparison"
      },
      {
        "instr_index": 235,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 236,
        "op_code": "JA",
        "operand_type": "address",
        "operand": 238,
        "comment": "jump to return if MathOp.GT was success"
      },
      {
        "instr_index": 237,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 238,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GT from stack"
      },
      {
        "instr_index": 239,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 240,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 254,
        "comment": "end while loop"
      },
      {
        "instr_index": 241,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 8,
        "comment": "load literal 8"
      },
      {
        "instr_index": 242,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHR to stack"
      },
      {
        "instr_index": 243,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier char4 from stack"
      },
      {
        "instr_index": 244,
        "op_code": "SHR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHR math operation"
      },
      {
        "instr_index": 245,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHR from stack"
      },
      {
        "instr_index": 246,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable char4"
      },
      {
        "instr_index": 247,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 248,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 249,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 250,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 251,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 252,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable j"
      },
      {
        "instr_index": 253,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 231,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 254,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 255,
        "comment": "load literal 255"
      },
      {
        "instr_index": 255,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 256,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier char4 from stack"
      },
      {
        "instr_index": 257,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 258,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 259,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"char4\" out of stack"
      },
      {
        "instr_index": 260,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"j\" out of stack"
      },
      {
        "instr_index": 261,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"addr\" out of stack"
      },
      {
        "instr_index": 262,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 2,
        "comment": "return from function get_string_char"
      },
      {
        "instr_index": 263,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 255,
        "comment": "load literal 255"
      },
      {
        "instr_index": 264,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 265,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 266,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 267,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 268,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable val"
      },
      {
        "instr_index": 269,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 276,
        "comment": "load next instruction address (return from divide)"
      },
      {
        "instr_index": 270,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 271,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 272,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 273,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load literal 4"
      },
      {
        "instr_index": 274,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 275,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 29,
        "comment": "function call"
      },
      {
        "instr_index": 276,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 277,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 278,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 279,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 280,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier s from stack"
      },
      {
        "instr_index": 281,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 282,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 283,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"addr\" onto stack"
      },
      {
        "instr_index": 284,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 291,
        "comment": "load next instruction address (return from remainder)"
      },
      {
        "instr_index": 285,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 286,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 287,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 288,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load literal 4"
      },
      {
        "instr_index": 289,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 290,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 115,
        "comment": "function call"
      },
      {
        "instr_index": 291,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 292,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 293,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 294,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"j\" onto stack"
      },
      {
        "instr_index": 295,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 296,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"char4\" onto stack"
      },
      {
        "instr_index": 297,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 298,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"bit_mask\" onto stack"
      },
      {
        "instr_index": 299,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 256,
        "comment": "load literal 256"
      },
      {
        "instr_index": 300,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 301,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier bit_mask from stack"
      },
      {
        "instr_index": 302,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 303,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 304,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable bit_mask"
      },
      {
        "instr_index": 305,
        "op_code": "LD",
        "operand_type": "pointer_stack_offset",
        "operand": 3,
        "comment": "load by pointer addr"
      },
      {
        "instr_index": 306,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable char4"
      },
      {
        "instr_index": 307,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 308,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GT to stack"
      },
      {
        "instr_index": 309,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 310,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GT comparison"
      },
      {
        "instr_index": 311,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 312,
        "op_code": "JA",
        "operand_type": "address",
        "operand": 314,
        "comment": "jump to return if MathOp.GT was success"
      },
      {
        "instr_index": 313,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 314,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GT from stack"
      },
      {
        "instr_index": 315,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 316,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 340,
        "comment": "end while loop"
      },
      {
        "instr_index": 317,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 8,
        "comment": "load literal 8"
      },
      {
        "instr_index": 318,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 319,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 5,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 320,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 321,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 322,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 4,
        "comment": "update variable val"
      },
      {
        "instr_index": 323,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 8,
        "comment": "load literal 8"
      },
      {
        "instr_index": 324,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHL to stack"
      },
      {
        "instr_index": 325,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier bit_mask from stack"
      },
      {
        "instr_index": 326,
        "op_code": "SHL",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHL math operation"
      },
      {
        "instr_index": 327,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHL from stack"
      },
      {
        "instr_index": 328,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 329,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 255,
        "comment": "load literal 255"
      },
      {
        "instr_index": 330,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 331,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 332,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable bit_mask"
      },
      {
        "instr_index": 333,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 334,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 335,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 336,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 337,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 338,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable j"
      },
      {
        "instr_index": 339,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 307,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 340,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "load by identifier bit_mask from stack"
      },
      {
        "instr_index": 341,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 342,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier char4 from stack"
      },
      {
        "instr_index": 343,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 344,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 345,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.OR to stack"
      },
      {
        "instr_index": 346,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 5,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 347,
        "op_code": "OR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.OR math operation"
      },
      {
        "instr_index": 348,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.OR from stack"
      },
      {
        "instr_index": 349,
        "op_code": "ST",
        "operand_type": "pointer_stack_offset",
        "operand": 3,
        "comment": "update by pointer addr"
      },
      {
        "instr_index": 350,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"bit_mask\" out of stack"
      },
      {
        "instr_index": 351,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"char4\" out of stack"
      },
      {
        "instr_index": 352,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"j\" out of stack"
      },
      {
        "instr_index": 353,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"addr\" out of stack"
      },
      {
        "instr_index": 354,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 3,
        "comment": "return from function set_string_char"
      },
      {
        "instr_index": 355,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 356,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"char\" onto stack"
      },
      {
        "instr_index": 357,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 358,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"j\" onto stack"
      },
      {
        "instr_index": 359,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 360,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"continue\" onto stack"
      },
      {
        "instr_index": 361,
        "op_code": "LD",
        "operand_type": "pointer_stack_offset",
        "operand": 3,
        "comment": "load by pointer s"
      },
      {
        "instr_index": 362,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable char"
      },
      {
        "instr_index": 363,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "load by identifier continue from stack"
      },
      {
        "instr_index": 364,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 365,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 418,
        "comment": "end while loop"
      },
      {
        "instr_index": 366,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 367,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.EQ to stack"
      },
      {
        "instr_index": 368,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 255,
        "comment": "load literal 255"
      },
      {
        "instr_index": 369,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.AND to stack"
      },
      {
        "instr_index": 370,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 4,
        "comment": "load by identifier char from stack"
      },
      {
        "instr_index": 371,
        "op_code": "AND",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.AND math operation"
      },
      {
        "instr_index": 372,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.AND from stack"
      },
      {
        "instr_index": 373,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.EQ comparison"
      },
      {
        "instr_index": 374,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 375,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 377,
        "comment": "jump to return if MathOp.EQ was success"
      },
      {
        "instr_index": 376,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 377,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.EQ from stack"
      },
      {
        "instr_index": 378,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "if compare"
      },
      {
        "instr_index": 379,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 383,
        "comment": "jump to end or false branch if false"
      },
      {
        "instr_index": 380,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 381,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable continue"
      },
      {
        "instr_index": 382,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 417,
        "comment": "true branch finished, jump to end"
      },
      {
        "instr_index": 383,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier char from stack"
      },
      {
        "instr_index": 384,
        "op_code": "ST",
        "operand_type": "address",
        "operand": 69,
        "comment": "io write"
      },
      {
        "instr_index": 385,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 8,
        "comment": "load literal 8"
      },
      {
        "instr_index": 386,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SHR to stack"
      },
      {
        "instr_index": 387,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier char from stack"
      },
      {
        "instr_index": 388,
        "op_code": "SHR",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SHR math operation"
      },
      {
        "instr_index": 389,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SHR from stack"
      },
      {
        "instr_index": 390,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable char"
      },
      {
        "instr_index": 391,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 392,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 393,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 394,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 395,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 396,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable j"
      },
      {
        "instr_index": 397,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load literal 4"
      },
      {
        "instr_index": 398,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GE to stack"
      },
      {
        "instr_index": 399,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier j from stack"
      },
      {
        "instr_index": 400,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GE comparison"
      },
      {
        "instr_index": 401,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 402,
        "op_code": "JAE",
        "operand_type": "address",
        "operand": 404,
        "comment": "jump to return if MathOp.GE was success"
      },
      {
        "instr_index": 403,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 404,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GE from stack"
      },
      {
        "instr_index": 405,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "if compare"
      },
      {
        "instr_index": 406,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 417,
        "comment": "jump to end or false branch if false"
      },
      {
        "instr_index": 407,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 408,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable j"
      },
      {
        "instr_index": 409,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 410,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 411,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 4,
        "comment": "load by identifier s from stack"
      },
      {
        "instr_index": 412,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 413,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 414,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "update variable s"
      },
      {
        "instr_index": 415,
        "op_code": "LD",
        "operand_type": "pointer_stack_offset",
        "operand": 3,
        "comment": "load by pointer s"
      },
      {
        "instr_index": 416,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable char"
      },
      {
        "instr_index": 417,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 363,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 418,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"continue\" out of stack"
      },
      {
        "instr_index": 419,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"j\" out of stack"
      },
      {
        "instr_index": 420,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"char\" out of stack"
      },
      {
        "instr_index": 421,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 1,
        "comment": "return from function print_string"
      },
      {
        "instr_index": 422,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 423,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"i\" onto stack"
      },
      {
        "instr_index": 424,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 431,
        "comment": "load next instruction address (return from remainder)"
      },
      {
        "instr_index": 425,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 426,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 427,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 428,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 10,
        "comment": "load literal 10"
      },
      {
        "instr_index": 429,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 430,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 115,
        "comment": "function call"
      },
      {
        "instr_index": 431,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 432,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 433,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 434,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"rem\" onto stack"
      },
      {
        "instr_index": 435,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 448,
        "comment": "load next instruction address (return from set_string_char)"
      },
      {
        "instr_index": 436,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 437,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load by identifier print_int_buffer from memory"
      },
      {
        "instr_index": 438,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 439,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 440,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 441,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 48,
        "comment": "load literal 48"
      },
      {
        "instr_index": 442,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 443,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 4,
        "comment": "load by identifier rem from stack"
      },
      {
        "instr_index": 444,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 445,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 446,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 2 onto stack"
      },
      {
        "instr_index": 447,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 263,
        "comment": "function call"
      },
      {
        "instr_index": 448,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 2 from stack"
      },
      {
        "instr_index": 449,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 450,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 451,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 452,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 459,
        "comment": "load next instruction address (return from divide)"
      },
      {
        "instr_index": 453,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 454,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 455,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 456,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 10,
        "comment": "load literal 10"
      },
      {
        "instr_index": 457,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 458,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 29,
        "comment": "function call"
      },
      {
        "instr_index": 459,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 460,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 461,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 462,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable val"
      },
      {
        "instr_index": 463,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"rem\" out of stack"
      },
      {
        "instr_index": 464,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 465,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GT to stack"
      },
      {
        "instr_index": 466,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 467,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GT comparison"
      },
      {
        "instr_index": 468,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 469,
        "op_code": "JA",
        "operand_type": "address",
        "operand": 471,
        "comment": "jump to return if MathOp.GT was success"
      },
      {
        "instr_index": 470,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 471,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GT from stack"
      },
      {
        "instr_index": 472,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 473,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 521,
        "comment": "end while loop"
      },
      {
        "instr_index": 474,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 481,
        "comment": "load next instruction address (return from remainder)"
      },
      {
        "instr_index": 475,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 476,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 477,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 478,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 10,
        "comment": "load literal 10"
      },
      {
        "instr_index": 479,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 480,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 115,
        "comment": "function call"
      },
      {
        "instr_index": 481,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 482,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 483,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 484,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"rem\" onto stack"
      },
      {
        "instr_index": 485,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 498,
        "comment": "load next instruction address (return from set_string_char)"
      },
      {
        "instr_index": 486,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 487,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load by identifier print_int_buffer from memory"
      },
      {
        "instr_index": 488,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 489,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 490,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 491,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 48,
        "comment": "load literal 48"
      },
      {
        "instr_index": 492,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 493,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 4,
        "comment": "load by identifier rem from stack"
      },
      {
        "instr_index": 494,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 495,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 496,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 2 onto stack"
      },
      {
        "instr_index": 497,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 263,
        "comment": "function call"
      },
      {
        "instr_index": 498,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 2 from stack"
      },
      {
        "instr_index": 499,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 500,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 501,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 502,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 509,
        "comment": "load next instruction address (return from divide)"
      },
      {
        "instr_index": 503,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 504,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier val from stack"
      },
      {
        "instr_index": 505,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 506,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 10,
        "comment": "load literal 10"
      },
      {
        "instr_index": 507,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 508,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 29,
        "comment": "function call"
      },
      {
        "instr_index": 509,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 510,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 511,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 512,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable val"
      },
      {
        "instr_index": 513,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 514,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.ADD to stack"
      },
      {
        "instr_index": 515,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 516,
        "op_code": "ADD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.ADD math operation"
      },
      {
        "instr_index": 517,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.ADD from stack"
      },
      {
        "instr_index": 518,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "update variable i"
      },
      {
        "instr_index": 519,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"rem\" out of stack"
      },
      {
        "instr_index": 520,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 464,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 521,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 522,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.GT to stack"
      },
      {
        "instr_index": 523,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 524,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.GT comparison"
      },
      {
        "instr_index": 525,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 526,
        "op_code": "JA",
        "operand_type": "address",
        "operand": 528,
        "comment": "jump to return if MathOp.GT was success"
      },
      {
        "instr_index": 527,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 528,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.GT from stack"
      },
      {
        "instr_index": 529,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 530,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 548,
        "comment": "end while loop"
      },
      {
        "instr_index": 531,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 543,
        "comment": "load next instruction address (return from get_string_char)"
      },
      {
        "instr_index": 532,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 533,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 4,
        "comment": "load by identifier print_int_buffer from memory"
      },
      {
        "instr_index": 534,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 535,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load literal 1"
      },
      {
        "instr_index": 536,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.SUB to stack"
      },
      {
        "instr_index": 537,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 3,
        "comment": "load by identifier i from stack"
      },
      {
        "instr_index": 538,
        "op_code": "SUB",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.SUB math operation"
      },
      {
        "instr_index": 539,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.SUB from stack"
      },
      {
        "instr_index": 540,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 2,
        "comment": "update variable i"
      },
      {
        "instr_index": 541,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 1 onto stack"
      },
      {
        "instr_index": 542,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 201,
        "comment": "function call"
      },
      {
        "instr_index": 543,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 1 from stack"
      },
      {
        "instr_index": 544,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 545,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 546,
        "op_code": "ST",
        "operand_type": "address",
        "operand": 69,
        "comment": "io write"
      },
      {
        "instr_index": 547,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 521,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 548,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"i\" out of stack"
      },
      {
        "instr_index": 549,
        "op_code": "JMP",
        "operand_type": "pointer_stack_offset",
        "operand": 1,
        "comment": "return from function print_int"
      },
      {
        "instr_index": 550,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 555,
        "comment": "load next instruction address (return from print_string)"
      },
      {
        "instr_index": 551,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push return address onto the stack"
      },
      {
        "instr_index": 552,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load string literal hello world! address"
      },
      {
        "instr_index": 553,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push parameter 0 onto stack"
      },
      {
        "instr_index": 554,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 355,
        "comment": "function call"
      },
      {
        "instr_index": 555,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop parameter 0 from stack"
      },
      {
        "instr_index": 556,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop return address from stack"
      },
      {
        "instr_index": 557,
        "op_code": "HLT",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": ""
      }
    ],
    "data_memory": [
      {
        "value": 1819043176,
        "identifier": "hello world!"
      },
      {
        "value": 1870078063,
        "identifier": null
      },
      {
        "value": 560229490,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": "print_int_buffer"
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      },
      {
        "value": 0,
        "identifier": null
      }
    ]
  }
out_logs: |-
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 0 | SP: 4096 | PC: 0 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 0 | SP: 4096 | PC: 0 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 550 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 550 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 550 | SP: 4096 | PC: 550 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 550 | SP: 4096 | PC: 550 | IR: {"instr_index":0,"op_code":"JMP","operand_type":"address","operand":550,"comment":"Jump to program start"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 550 | SP: 4096 | PC: 550 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 0 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 550 | SP: 4096 | PC: 550 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 550 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 550 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 550 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 550 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 550 | BR: 550 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 555 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 555 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 555 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":550,"op_code":"LD","operand_type":"immediate","operand":555,"comment":"load next instruction address (return from print_string)"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 555 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 550 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 555 | AR: 550 | SP: 4096 | PC: 551 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 551 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 555 | AR: 550 | SP: 4096 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 551 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 555 | AR: 550 | SP: 4096 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 551 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 555 | AR: 550 | SP: 4096 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":551,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push return address onto the stack"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 4095 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 552 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 552 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 552 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 552 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 552 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 555 | BR: 552 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 555 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":552,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load string literal hello world! address"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 552 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 553 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 553 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 553 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 553 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":553,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push parameter 0 onto stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 554 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 554 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 554 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 554 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 554 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 0 | BR: 554 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 355 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 355 | SP: 4094 | PC: 555 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 355 | SP: 4094 | PC: 355 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 355 | SP: 4094 | PC: 355 | IR: {"instr_index":554,"op_code":"JMP","operand_type":"address","operand":355,"comment":"function call"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 355 | SP: 4094 | PC: 355 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 554 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 355 | SP: 4094 | PC: 355 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 355 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 355 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 355 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 355 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 355 | BR: 355 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":355,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 355 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 355 | SP: 4094 | PC: 356 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 356 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 355 | SP: 4094 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 356 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 355 | SP: 4094 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 356 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 355 | SP: 4094 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":356,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"char\" onto stack"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4093 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 357 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":357,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 357 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 358 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 358 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 358 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4093 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 358 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4093 | SP: 4093 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":358,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"j\" onto stack"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 4092 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 359 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 359 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 359 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 359 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 359 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 0 | BR: 359 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":359,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 359 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4092 | PC: 360 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 360 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4092 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 360 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4092 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 360 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4092 | SP: 4092 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":360,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"continue\" onto stack"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 4091 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 361 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 361 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 361 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 361 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 361 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 361 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 361 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 361 | N: False | Z: False | C: False
  Microcode 14: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 361 | N: False | Z: False | C: False
  Microcode 15: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 361 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 361 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 361 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 361 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 361 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":361,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 361 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 362 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 362 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 362 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 362 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 362 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1819043176 | BR: 362 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1819043176 | AR: 0 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":362,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 362 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 363 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 363 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 363 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 363 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4093 | BR: 363 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1819043176 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1819043176 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 1819043176 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 104 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 104 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 104 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 104 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 104 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 104 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 104 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 104 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 104 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 104 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 104 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 104 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 104 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1819043176 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1819043176 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1819043176 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1819043176 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1819043176 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 1819043176 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7105637 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7105637 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7105637 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7105637 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 7105637 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7105637 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7105637 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 7105637 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 101 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 101 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 101 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 101 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 101 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 101 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 101 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 101 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 101 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 101 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 101 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 101 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 101 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7105637 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7105637 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7105637 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7105637 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7105637 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 7105637 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 27756 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 27756 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 27756 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 27756 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 27756 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 27756 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 27756 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 27756 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 27756 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 27756 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 27756 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 27756 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 27756 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 27756 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 108 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 108 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 108 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 108 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 108 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 108 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 108 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 108 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 108 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 108 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 54: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 411 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 412 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 412 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 412 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 412 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 412 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 14: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 15: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 415 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 415 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 415 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 415 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1 | BR: 415 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 415 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 416 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 416 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 416 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 416 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 1870078063 | BR: 416 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1870078063 | AR: 1 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1870078063 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1870078063 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 1870078063 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 1870078063 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 1870078063 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1870078063 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1870078063 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 1870078063 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1870078063 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 1870078063 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7304992 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7304992 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7304992 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 7304992 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 7304992 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7304992 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 7304992 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 7304992 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 32 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 32 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 32 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 32 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 32 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 32 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 32 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 32 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 32 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 32 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 32 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 32 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 32 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 7304992 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7304992 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7304992 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 7304992 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 7304992 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 7304992 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 28535 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 28535 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 28535 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 28535 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 28535 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 28535 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 28535 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 28535 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 119 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 119 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 119 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 119 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 119 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 119 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 119 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 119 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 119 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 119 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 119 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 119 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 119 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 28535 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 28535 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 28535 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 28535 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 28535 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 28535 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 111 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 111 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 111 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 111 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 111 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 111 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 111 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 111 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 111 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 111 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 54: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 14: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 15: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 2 | BR: 415 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 2 | BR: 415 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 2 | BR: 415 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 2 | BR: 415 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 2 | BR: 415 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 415 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 416 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 416 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 416 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 416 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 560229490 | BR: 416 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 560229490 | AR: 2 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 560229490 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 560229490 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 560229490 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 560229490 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 114 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 114 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 114 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 114 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 114 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 114 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 114 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 114 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 114 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 114 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 114 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 114 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 114 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 560229490 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 560229490 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 560229490 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 560229490 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 560229490 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 560229490 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 2188396 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 2188396 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 2188396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 2188396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 2188396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2188396 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 0 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 1 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 1 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 2188396 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 2188396 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 108 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 108 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 108 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 108 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 2188396 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2188396 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2188396 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 2188396 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2188396 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 2188396 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 8548 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 8548 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 8548 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 8548 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 8548 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8548 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 2 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 2 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 8548 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 8548 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 100 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 100 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 100 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 100 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 100 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 100 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 100 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 100 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 100 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 100 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 100 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 100 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 100 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 8548 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 8548 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8548 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8548 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8548 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 8548 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 33 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 33 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 33 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 33 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 33 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 33 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 393 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 394 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 3 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 60: JUMP TO 66 IF N = False Z = False (OpCode.JA)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 61: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 402 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 404 | BR: 403 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":403,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 403 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 404 | N: True | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: True | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: True | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 406 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 33 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 33 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 33 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 33 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 33 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 375 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 377 | BR: 376 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":376,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 376 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 377 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 379 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 383 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 383 | BR: 383 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 383 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":383,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier char from stack"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 383 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 384 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 384 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 384 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 384 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 384 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 33 | BR: 384 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 33 | AR: 4093 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":384,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 384 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 69 | SP: 4091 | PC: 385 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 69 | BR: 385 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":385,"op_code":"LD","operand_type":"immediate","operand":8,"comment":"load literal 8"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 385 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 69 | SP: 4091 | PC: 386 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 386 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 8 | AR: 69 | SP: 4091 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":386,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.SHR to stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 387 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 8 | BR: 387 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 8 | AR: 4090 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 387 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 8 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 33 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 33 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":387,"op_code":"LD","operand_type":"stack_offset","operand":3,"comment":"load by identifier char from stack"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 33 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 387 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 388 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 388 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 388 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 388 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 388 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 33 | BR: 388 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 33 | AR: 4093 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 4090 | BR: 388 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 388 | N: False | Z: True | C: False
  Microcode 41: BR <- AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.SHR AluRopSel.SEL_DR) (OpCode.SHR)
  AC: 33 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":388,"op_code":"SHR","operand_type":"stack_offset","operand":0,"comment":"do MathOp.SHR math operation"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 0 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 389 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 389 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":389,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.SHR from stack"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 390 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 8 | BR: 390 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":390,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 390 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 391 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4093 | BR: 391 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":391,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 391 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 392 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 392 | N: False | Z: True | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4093 | SP: 4091 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":392,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 393 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 1 | BR: 393 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 393 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":393,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 393 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 394 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 3 | BR: 394 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4092 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 394 | N: False | Z: True | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 394 | N: False | Z: True | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":394,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 395 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 395 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":395,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 396 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 1 | BR: 396 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":396,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 396 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 397 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4092 | BR: 397 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":397,"op_code":"LD","operand_type":"immediate","operand":4,"comment":"load literal 4"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 397 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 398 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 398 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 4 | AR: 4092 | SP: 4091 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":398,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.GE to stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 399 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4092 | BR: 399 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":399,"op_code":"LD","operand_type":"stack_offset","operand":2,"comment":"load by identifier j from stack"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 399 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 400 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 4 | AR: 4092 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4090 | BR: 400 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 54: JUMP TO 67 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":400,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.GE comparison"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 400 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 401 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 4 | BR: 401 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 4 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":401,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 401 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 402 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 1 | BR: 402 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 59: JUMP TO 66 IF N = False (OpCode.JAE)
  AC: 1 | AR: 404 | SP: 4090 | PC: 403 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":402,"op_code":"JAE","operand_type":"address","operand":404,"comment":"jump to return if MathOp.GE was success"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 402 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4090 | PC: 404 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 404 | N: False | Z: True | C: True
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 404 | SP: 4090 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":404,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.GE from stack"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 4090 | N: False | Z: True | C: True
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 405 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 404 | BR: 405 | N: False | Z: True | C: True
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: True | C: True
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":405,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 405 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 404 | SP: 4091 | PC: 406 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 406 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 404 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":406,"op_code":"JZ","operand_type":"address","operand":417,"comment":"jump to end or false branch if false"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 406 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 417 | SP: 4091 | PC: 407 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 417 | BR: 407 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":407,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 407 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 408 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 0 | BR: 408 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":408,"op_code":"ST","operand_type":"stack_offset","operand":1,"comment":"update variable j"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 408 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 409 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 4092 | BR: 409 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":409,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load literal 1"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 409 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 410 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 410 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 1 | AR: 4092 | SP: 4091 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":410,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.ADD to stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 411 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 1 | BR: 411 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 4094 | BR: 411 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 2 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 2 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":411,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier s from stack"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 2 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 411 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 412 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 412 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 412 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 412 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 412 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 2 | BR: 412 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 2 | AR: 4094 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 4090 | BR: 412 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 412 | N: False | Z: False | C: False
  Microcode 31: BR <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_DR) (OpCode.ADD)
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 32: JUMP TO 42 IF 
  AC: 2 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":412,"op_code":"ADD","operand_type":"stack_offset","operand":0,"comment":"do MathOp.ADD math operation"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 3 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 413 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 413 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 3 | AR: 4090 | SP: 4090 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":413,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.ADD from stack"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 414 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 1 | BR: 414 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4090 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":414,"op_code":"ST","operand_type":"stack_offset","operand":3,"comment":"update variable s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 414 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 415 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 14: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 4094 | BR: 415 | N: False | Z: False | C: False
  Microcode 15: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 4094 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 3 | BR: 415 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 3 | BR: 415 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 3 | BR: 415 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 3 | BR: 415 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 3 | BR: 415 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 3 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":415,"op_code":"LD","operand_type":"pointer_stack_offset","operand":3,"comment":"load by pointer s"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 415 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 3 | SP: 4091 | PC: 416 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 416 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 416 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 416 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 416 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 0 | BR: 416 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 3 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":416,"op_code":"ST","operand_type":"stack_offset","operand":2,"comment":"update variable char"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 416 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 4093 | BR: 417 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4093 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 363 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 1 | BR: 364 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 365 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 418 | BR: 366 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":366,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 366 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 367 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 367 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 418 | SP: 4091 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":367,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.EQ to stack"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 4090 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 368 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 0 | BR: 368 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":368,"op_code":"LD","operand_type":"immediate","operand":255,"comment":"load literal 255"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 368 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 369 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 369 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 255 | AR: 4090 | SP: 4090 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":369,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.AND to stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 370 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 255 | BR: 370 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 255 | AR: 4089 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 4093 | BR: 370 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 255 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":370,"op_code":"LD","operand_type":"stack_offset","operand":4,"comment":"load by identifier char from stack"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 370 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 371 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 371 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 371 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 371 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 371 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 0 | BR: 371 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4093 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 4089 | BR: 371 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 371 | N: False | Z: False | C: False
  Microcode 35: BR <- AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR PS <- NZC(AluLopSel.SEL_AC AluOp.AND AluRopSel.SEL_DR) (OpCode.AND)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 36: JUMP TO 42 IF 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 42: AC <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO (math_end)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 43: JUMP TO 67 IF 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":371,"op_code":"AND","operand_type":"stack_offset","operand":0,"comment":"do MathOp.AND math operation"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 0 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 372 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 372 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 4089 | SP: 4089 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":372,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.AND from stack"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 4089 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 373 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 255 | BR: 373 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4089 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 4090 | BR: 373 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":373,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.EQ comparison"} | DR: 0 | BR: 373 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 373 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 374 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 374 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":374,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 374 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 375 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 1 | BR: 375 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4090 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 377 | SP: 4090 | PC: 376 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":375,"op_code":"JZ","operand_type":"address","operand":377,"comment":"jump to return if MathOp.EQ was success"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 375 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4090 | PC: 377 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 377 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 377 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 377 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 377 | SP: 4090 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 4090 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 4090 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 4090 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":377,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.EQ from stack"} | DR: 377 | BR: 4090 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 4090 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4091 | PC: 378 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 378 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 378 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 378 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 378 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 377 | BR: 378 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":378,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"if compare"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 378 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 377 | SP: 4091 | PC: 379 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 0 | BR: 379 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 377 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":379,"op_code":"JZ","operand_type":"address","operand":383,"comment":"jump to end or false branch if false"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 379 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 383 | SP: 4091 | PC: 380 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 380 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 380 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 380 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 380 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 383 | BR: 380 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":380,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 380 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 383 | SP: 4091 | PC: 381 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 381 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 381 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 381 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 381 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 0 | BR: 381 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 383 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":381,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable continue"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 381 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 382 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 382 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 382 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 382 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 382 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 4091 | BR: 382 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 417 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 417 | SP: 4091 | PC: 383 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":382,"op_code":"JMP","operand_type":"address","operand":417,"comment":"true branch finished, jump to end"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 382 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 417 | SP: 4091 | PC: 417 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 417 | BR: 417 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 417 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 363 | SP: 4091 | PC: 418 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":417,"op_code":"JMP","operand_type":"address","operand":363,"comment":"jump to while loop condition check"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 417 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 363 | SP: 4091 | PC: 363 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 363 | BR: 363 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 363 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 4091 | BR: 363 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":363,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier continue from stack"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 363 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 364 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":364,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 364 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 365 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 0 | BR: 365 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4091 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 418 | SP: 4091 | PC: 366 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 418 | SP: 4091 | PC: 418 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4091 | PC: 418 | IR: {"instr_index":365,"op_code":"JZ","operand_type":"address","operand":418,"comment":"end while loop"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4091 | PC: 418 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 365 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4091 | PC: 418 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 418 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4091 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 418 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4091 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 418 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 418 | SP: 4091 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 4091 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4092 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 4091 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4092 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 4091 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4092 | PC: 419 | IR: {"instr_index":418,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"continue\" out of stack"} | DR: 418 | BR: 4091 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4092 | PC: 419 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 4091 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4092 | PC: 419 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 419 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4092 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 419 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4092 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 419 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 418 | SP: 4092 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 4092 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4093 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 4092 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4093 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 4092 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4093 | PC: 420 | IR: {"instr_index":419,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"j\" out of stack"} | DR: 418 | BR: 4092 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4093 | PC: 420 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 4092 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4093 | PC: 420 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 420 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4093 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 420 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4093 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 420 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 418 | SP: 4093 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 4093 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4094 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 4093 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 418 | SP: 4094 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 4093 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 418 | SP: 4094 | PC: 421 | IR: {"instr_index":420,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"char\" out of stack"} | DR: 418 | BR: 4093 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 418 | SP: 4094 | PC: 421 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 4093 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 418 | SP: 4094 | PC: 421 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 421 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 421 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 421 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 421 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 418 | BR: 421 | N: False | Z: True | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 4095 | BR: 421 | N: False | Z: True | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 418 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 4095 | BR: 421 | N: False | Z: True | C: False
  Microcode 14: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 4095 | BR: 421 | N: False | Z: True | C: False
  Microcode 15: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 555 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 555 | SP: 4094 | PC: 422 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 555 | SP: 4094 | PC: 555 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 555 | SP: 4094 | PC: 555 | IR: {"instr_index":421,"op_code":"JMP","operand_type":"pointer_stack_offset","operand":1,"comment":"return from function print_string"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 555 | SP: 4094 | PC: 555 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 421 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 555 | SP: 4094 | PC: 555 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 555 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 555 | SP: 4094 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 555 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 555 | SP: 4094 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 555 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 555 | SP: 4094 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 4094 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 555 | SP: 4095 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 4094 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 555 | SP: 4095 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 4094 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 555 | SP: 4095 | PC: 556 | IR: {"instr_index":555,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop parameter 0 from stack"} | DR: 555 | BR: 4094 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 555 | SP: 4095 | PC: 556 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 4094 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 555 | SP: 4095 | PC: 556 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 556 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 555 | SP: 4095 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 556 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 555 | SP: 4095 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 556 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 555 | SP: 4095 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 4095 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 555 | SP: 4096 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 4095 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 555 | SP: 4096 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 4095 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 555 | SP: 4096 | PC: 557 | IR: {"instr_index":556,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop return address from stack"} | DR: 555 | BR: 4095 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 555 | SP: 4096 | PC: 557 | IR: {"instr_index":557,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 555 | BR: 4095 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 555 | SP: 4096 | PC: 557 | IR: {"instr_index":557,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 555 | BR: 557 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 555 | SP: 4096 | PC: 558 | IR: {"instr_index":557,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 555 | BR: 557 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 555 | SP: 4096 | PC: 558 | IR: {"instr_index":557,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 555 | BR: 557 | N: False | Z: True | C: False
  Microcode 51: HLT (OpCode.HLT)
  AC: 0 | AR: 555 | SP: 4096 | PC: 558 | IR: {"instr_index":557,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 555 | BR: 557 | N: False | Z: True | C: False
