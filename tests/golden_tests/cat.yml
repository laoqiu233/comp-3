in_source: examples/cat.lisq
in: foo
out: |
  foo
out_prog: |-
  {
    "instructions": [
      {
        "instr_index": 0,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 1,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pushed variable \"a\" onto stack"
      },
      {
        "instr_index": 2,
        "op_code": "LD",
        "operand_type": "address",
        "operand": 52,
        "comment": "io read"
      },
      {
        "instr_index": 3,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable a"
      },
      {
        "instr_index": 4,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load literal 0"
      },
      {
        "instr_index": 5,
        "op_code": "PUSH",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "push right operand of MathOp.NE to stack"
      },
      {
        "instr_index": 6,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 1,
        "comment": "load by identifier a from stack"
      },
      {
        "instr_index": 7,
        "op_code": "CMP",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "do MathOp.NE comparison"
      },
      {
        "instr_index": 8,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 1,
        "comment": "load true value"
      },
      {
        "instr_index": 9,
        "op_code": "JNZ",
        "operand_type": "address",
        "operand": 11,
        "comment": "jump to return if MathOp.NE was success"
      },
      {
        "instr_index": 10,
        "op_code": "LD",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "load false value"
      },
      {
        "instr_index": 11,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "pop right operand of MathOp.NE from stack"
      },
      {
        "instr_index": 12,
        "op_code": "CMP",
        "operand_type": "immediate",
        "operand": 0,
        "comment": "check if false"
      },
      {
        "instr_index": 13,
        "op_code": "JZ",
        "operand_type": "address",
        "operand": 19,
        "comment": "end while loop"
      },
      {
        "instr_index": 14,
        "op_code": "LD",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "load by identifier a from stack"
      },
      {
        "instr_index": 15,
        "op_code": "ST",
        "operand_type": "address",
        "operand": 69,
        "comment": "io write"
      },
      {
        "instr_index": 16,
        "op_code": "LD",
        "operand_type": "address",
        "operand": 52,
        "comment": "io read"
      },
      {
        "instr_index": 17,
        "op_code": "ST",
        "operand_type": "stack_offset",
        "operand": 0,
        "comment": "update variable a"
      },
      {
        "instr_index": 18,
        "op_code": "JMP",
        "operand_type": "address",
        "operand": 4,
        "comment": "jump to while loop condition check"
      },
      {
        "instr_index": 19,
        "op_code": "POP",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": "popped variable \"a\" out of stack"
      },
      {
        "instr_index": 20,
        "op_code": "HLT",
        "operand_type": "no_operand",
        "operand": 0,
        "comment": ""
      }
    ],
    "data_memory": []
  }
out_logs: |-
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 0 | SP: 4096 | PC: 0 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 0 | SP: 4096 | PC: 0 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":0,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 0 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 0 | SP: 4096 | PC: 1 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 1 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 0 | SP: 4096 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 1 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 0 | SP: 4096 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 1 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 0 | SP: 4096 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":1,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"pushed variable \"a\" onto stack"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 4095 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 2 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 2 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 2 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 2 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 2 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 2 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 2 | N: False | Z: False | C: False
  Microcode 22: DR <- DataIoMuxSel.SEL_IO (fetch_from_io)
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 102 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 102 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":2,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 2 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 52 | SP: 4095 | PC: 3 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 3 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 3 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 3 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 3 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 102 | BR: 3 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 102 | AR: 52 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":3,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 3 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 4 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 4 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 4 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 4 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4095 | BR: 4 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 102 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 6 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 7 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 7 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 7 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 7 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 102 | BR: 7 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 102 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 102 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 57: JUMP TO 66 IF Z = False (OpCode.JNZ)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 14 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 15 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 15 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 15 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 15 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 102 | BR: 15 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 102 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 102 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 102 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 22: DR <- DataIoMuxSel.SEL_IO (fetch_from_io)
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 102 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 57: JUMP TO 66 IF Z = False (OpCode.JNZ)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 22: DR <- DataIoMuxSel.SEL_IO (fetch_from_io)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 16 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 111 | BR: 17 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 6 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 111 | BR: 7 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 8 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 57: JUMP TO 66 IF Z = False (OpCode.JNZ)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 9 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 11 | N: False | Z: False | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 1 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 11 | BR: 12 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 12 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 56: JUMP TO 67 IF 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 13 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 19 | BR: 14 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 1 | AR: 19 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 14 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":14,"op_code":"LD","operand_type":"stack_offset","operand":0,"comment":"load by identifier a from stack"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 14 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 15 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 111 | BR: 15 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 4095 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 29: IO <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO (st_to_io)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 30: JUMP TO 67 IF 
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":15,"op_code":"ST","operand_type":"address","operand":69,"comment":"io write"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 15 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 111 | AR: 69 | SP: 4095 | PC: 16 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 69 | BR: 16 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 111 | AR: 69 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 52 | BR: 16 | N: False | Z: False | C: False
  Microcode 22: DR <- DataIoMuxSel.SEL_IO (fetch_from_io)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 111 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":16,"op_code":"LD","operand_type":"address","operand":52,"comment":"io read"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 16 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 52 | SP: 4095 | PC: 17 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 17 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 17 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 17 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 17 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 0 | BR: 17 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 52 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 26: JUMP TO 29 IF OPERNAD_TYPE IN ['address'] OPERAND = 69 (OpCode.ST)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 27: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 28: JUMP TO 67 IF 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":17,"op_code":"ST","operand_type":"stack_offset","operand":0,"comment":"update variable a"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 17 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 18 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4095 | BR: 18 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4095 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4 | SP: 4095 | PC: 19 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":18,"op_code":"JMP","operand_type":"address","operand":4,"comment":"jump to while loop condition check"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 18 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4 | SP: 4095 | PC: 4 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 4 | BR: 4 | N: False | Z: False | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":4,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load literal 0"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4 | SP: 4095 | PC: 5 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 5 | N: False | Z: False | C: False
  Microcode 44: BR <- AluLopSel.SEL_ZERO AluOp.DEC AluRopSel.SEL_SP (OpCode.PUSH)
  AC: 0 | AR: 4 | SP: 4095 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 45: AR <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO SP <- AluLopSel.SEL_BR AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 46: DATA <- AluLopSel.SEL_AC AluOp.ADD AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 47: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":5,"op_code":"PUSH","operand_type":"no_operand","operand":0,"comment":"push right operand of MathOp.NE to stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 4094 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 6 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 4095 | BR: 6 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":6,"op_code":"LD","operand_type":"stack_offset","operand":1,"comment":"load by identifier a from stack"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 6 | N: False | Z: False | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 7 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 12: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_SP (fetch_stack_offset)
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 13: JUMP TO 16 IF OPERNAD_TYPE IN ['stack_offset'] 
  AC: 0 | AR: 4095 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 19: JUMP TO 22 IF OPERNAD_TYPE IN ['address'] OPERAND = 52 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 4094 | BR: 7 | N: False | Z: False | C: False
  Microcode 20: DR <- DataIoMuxSel.SEL_DATA 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 21: JUMP TO 23 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: False | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":7,"op_code":"CMP","operand_type":"stack_offset","operand":0,"comment":"do MathOp.NE comparison"} | DR: 0 | BR: 7 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 7 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 8 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 0 | BR: 8 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":8,"op_code":"LD","operand_type":"immediate","operand":1,"comment":"load true value"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 8 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 9 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 1 | BR: 9 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 4094 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 57: JUMP TO 66 IF Z = False (OpCode.JNZ)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 58: JUMP TO 67 IF 
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":9,"op_code":"JNZ","operand_type":"address","operand":11,"comment":"jump to return if MathOp.NE was success"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 9 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 1 | AR: 11 | SP: 4094 | PC: 10 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 10 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 10 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 10 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 10 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 11 | BR: 10 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 1 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 24: AC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.LD)
  AC: 0 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 25: JUMP TO 67 IF 
  AC: 0 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":10,"op_code":"LD","operand_type":"immediate","operand":0,"comment":"load false value"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 10 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 11 | SP: 4094 | PC: 11 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 11 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 11 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 11 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 11 | SP: 4094 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 4094 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 4094 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 4094 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":11,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"pop right operand of MathOp.NE from stack"} | DR: 0 | BR: 4094 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 4094 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 11 | SP: 4095 | PC: 12 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 8: JUMP TO 17 IF 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 18: JUMP TO 23 IF OPERNAD_TYPE IN ['immediate', 'no_operand'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 23: JUMP TO DECODE(OP_CODE) IF (execute2)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 53: PS <- NZC(AluLopSel.SEL_AC AluOp.SUB AluRopSel.SEL_DR) (OpCode.CMP)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 54: JUMP TO 67 IF 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":12,"op_code":"CMP","operand_type":"immediate","operand":0,"comment":"check if false"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 12 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 11 | SP: 4095 | PC: 13 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: True | C: False
  Microcode 4: JUMP TO 9 IF OPERNAD_TYPE IN ['pointer_address'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: True | C: False
  Microcode 5: JUMP TO 12 IF OPERNAD_TYPE IN ['stack_offset', 'pointer_stack_offset'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 0 | BR: 13 | N: False | Z: True | C: False
  Microcode 6: DR <- AluLopSel.SEL_IR AluOp.ADD AluRopSel.SEL_ZERO (fetch_immediate_or_no_operand_or_address)
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 7: JUMP TO 16 IF OPERNAD_TYPE IN ['address'] 
  AC: 0 | AR: 11 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 16: AR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (fetch_operand)
  AC: 0 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 17: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['JZ', 'JNZ', 'JB', 'JBE', 'JA', 'JAE', 'JMP', 'ST'] (execute)
  AC: 0 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 55: JUMP TO 66 IF Z = True (OpCode.JZ)
  AC: 0 | AR: 19 | SP: 4095 | PC: 14 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 66: PC <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_DR (OpCode.JMP)
  AC: 0 | AR: 19 | SP: 4095 | PC: 19 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 19 | SP: 4095 | PC: 19 | IR: {"instr_index":13,"op_code":"JZ","operand_type":"address","operand":19,"comment":"end while loop"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 19 | SP: 4095 | PC: 19 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 13 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 19 | SP: 4095 | PC: 19 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 19 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 19 | SP: 4095 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 19 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 19 | SP: 4095 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 19 | N: False | Z: True | C: False
  Microcode 48: BR <- AluLopSel.SEL_ZERO AluOp.ADD AluRopSel.SEL_SP (OpCode.POP)
  AC: 0 | AR: 19 | SP: 4095 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 4095 | N: False | Z: True | C: False
  Microcode 49: SP <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 19 | SP: 4096 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 4095 | N: False | Z: True | C: False
  Microcode 50: JUMP TO 67 IF 
  AC: 0 | AR: 19 | SP: 4096 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 4095 | N: False | Z: True | C: False
  Microcode 67: JUMP TO 0 IF (end)
  AC: 0 | AR: 19 | SP: 4096 | PC: 20 | IR: {"instr_index":19,"op_code":"POP","operand_type":"no_operand","operand":0,"comment":"popped variable \"a\" out of stack"} | DR: 19 | BR: 4095 | N: False | Z: True | C: False
  Microcode 0: IR <- INSTR_MEMORY (start)
  AC: 0 | AR: 19 | SP: 4096 | PC: 20 | IR: {"instr_index":20,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 19 | BR: 4095 | N: False | Z: True | C: False
  Microcode 1: BR <- PC 
  AC: 0 | AR: 19 | SP: 4096 | PC: 20 | IR: {"instr_index":20,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 19 | BR: 20 | N: False | Z: True | C: False
  Microcode 2: PC <- AluLopSel.SEL_BR AluOp.INC AluRopSel.SEL_ZERO 
  AC: 0 | AR: 19 | SP: 4096 | PC: 21 | IR: {"instr_index":20,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 19 | BR: 20 | N: False | Z: True | C: False
  Microcode 3: JUMP TO DECODE(OP_CODE) IF OP_CODE IN ['PUSH', 'POP', 'HLT'] 
  AC: 0 | AR: 19 | SP: 4096 | PC: 21 | IR: {"instr_index":20,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 19 | BR: 20 | N: False | Z: True | C: False
  Microcode 51: HLT (OpCode.HLT)
  AC: 0 | AR: 19 | SP: 4096 | PC: 21 | IR: {"instr_index":20,"op_code":"HLT","operand_type":"no_operand","operand":0,"comment":""} | DR: 19 | BR: 20 | N: False | Z: True | C: False
